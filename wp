#!/usr/bin/env python3

from sys import argv
from os import listdir
from shlex import split as sh_split
from subprocess import run as sp_run


class Flag:
    def __init__(self, f_name: str, f_type: type, f_comment: str):
        self.f_name = f_name
        self.f_type = f_type
        self.f_comment = f_comment


class FlagData:
    def __init__(self, name:str, flag: Flag, data):
        self.name = name
        self.flag = (flag, data)
    

class WalterParser:

    # CONSTRUCTOR ##############################################################

    def __init__(self, config_file):
        self.is_strict = True
        self.default_defined = False
        for line in config_file.readlines():
            data_list = sh_split(line)
            if line.startswith("./"):
                self.executable = line
            elif line.startswith('-'):
                self.parse_flag(line)
            elif line.startswith('='):
                self.shortcuts.append((data_list[0], self.parse_data(data_list)))
            elif line.startswith('>'):
                if self.default_defined:
                    raise Exception("Default flags were already defined.")
                self.default = self.parse_data(data_list)
                self.default_defined = True
                if len(self.default) != len(self.flags) and self.is_strict:
                    raise Exception("Default does not contain correct amount of flags since mode = strict.")
            elif line.startswith("mode"):
                if "lax" in line:
                    self.is_strict = False
            elif line in ["", "\n"] or line.startswith('#'):
                pass
            else:
                raise Exception("Unexpected token encountered: " + line.split()[0])
    

    # MEMBER VARIABLES #########################################################

    flags: list[Flag] = []
    default: list[FlagData] = []
    shortcuts: list[tuple[str, list[FlagData]]] = []  # Contains tuple with sc[0] = sc_name, sc[1] = list of ShortcutFlag
    
    # WCONFIG PARSERS ##########################################################

    def parse_flag(self, flag_string) -> None:
        flag_list = sh_split(flag_string)
        if len(flag_list) != 3:
            raise Exception("Flag in unsupported format.")
        
        f_name = flag_list[0]
        if (flag_list[1] in ["int", "integer"]):
            f_type = int
        elif (flag_list[1] in ["str", "string"]):
            f_type = str
        elif (flag_list[1] in ["float", "double"]):
            f_type = float
        elif (flag_list[1] in ["none", "None"]):
            if self.is_strict:
                raise Exception("Flags that take no arguments are not supported when strict = true.")
            f_type = None
        else:
            raise Exception("Unsupported type encountered while parsing flag.")
        
        self.flags.append(Flag(f_name, f_type, flag_list[2]))
    
    
    def parse_data(self, data_list: list) -> list[FlagData]:
        flag_list: list[FlagData] = []
        i = 1
        while i < len(data_list):
            found = False
            for flag in self.flags:
                try:
                    if data_list[i] == flag.f_name:
                        if flag.f_type == int:
                            data = int(data_list[i + 1])
                            i += 2
                        elif flag.f_type == float:
                            data = float(data_list[i + 1])
                            i += 2
                        elif flag.f_type == None:
                            data = None
                            i += 1
                        else:
                            data = str(data_list[i + 1])
                            i += 2
                        
                        flag_list.append(FlagData(flag.f_name, flag, data))
                        found = True
                        break
                except:
                    raise Exception("Data type invalid. Expected: " + flag.f_type.__name__ + ", got: " + (data_list[i + 1] if i + 1 < len(data_list) else "\"\""))
            if not found:
                raise Exception("Flag not defined: " + data_list[i])
        return flag_list

    
    
    # RUN PREPPING #############################################################

    def merge_shortcut_with_default(self, s_name: str) -> list:
        for sc in self.shortcuts:
            if s_name == sc[0]:
                return self.merge_with_default(sc[1])
        raise Exception("Shortcut \"" + s_name + "\" not found.")
    

    def merge_with_default(self, user_list: list) -> list:
        for d_flag in self.default:
            if d_flag.name not in [u.name for u in user_list]:
                user_list.append(d_flag)
        
        return user_list
    

    def order(self, user_list: list) -> list:
        for i in range(len(self.flags)): # len(flags) should equal len(user_list)
            for j in range(i, len(user_list)):
                if user_list[j].name == self.flags[i].f_name:
                    if i != j:
                        user_list[i], user_list[j] = user_list[j], user_list[i]
                    break
        
        return user_list
    
    
    def convert_to_call(self, flag_list: list) -> list:
        call = [self.executable[:-1]]
        for flag in flag_list:
            if not self.is_strict:
                call.append(str(flag.name))
            if flag.flag[0].f_type != None:
                call.append(str(flag.flag[1]))
        
        return call
    
    
    # OTHER FUNCTIONS ##########################################################

    def print(self) -> None:
        print("Executable: " + self.executable)

        print("Supported flags:")
        for flag in self.flags:
            print(flag.f_name + " <" + flag.f_type.__name__ + "> => " + flag.f_comment)

        if len(self.shortcuts) > 0:
            print("\nSupported shortcuts:")
            for sc in self.shortcuts:
                print(sc[0], end=" ")
                for flag in sc[1]:
                    print(flag.name + " " + str(flag.flag[1]), end=" ")
            print()
          
        print("\nDefault call:")
        # TODO: executable contains newline or something
        print(self.executable[:-1], end=" ")
        for flag in self.default:
            print(flag.name + " " + str(flag.flag[1]), end=" ")
        print()


def main() -> None:
    if "wconfig" not in listdir():
        raise Exception("wconfig not found.")
    
    wp = WalterParser(open("wconfig", 'r'))

    user_flags = []

    if len(argv) == 1:
        if not wp.default_defined:
            raise Exception("No default flags were defined in wconfig")
        user_flags = wp.default
    elif len(argv) > 1 and argv[1] == '?':
        wp.print()
        return
    elif len(argv) == 2 and argv[1].startswith('='):
        user_flags = wp.merge_shortcut_with_default(argv[1])
    else:        
        user_flags = wp.parse_data(argv)
        user_flags = wp.merge_with_default(user_flags)


    user_flags = wp.order(user_flags)
    sp_run(wp.convert_to_call(user_flags))
    

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(str(e))
